// This file was generated by purescript-docs-search
window.DocsSearchTypeIndex["457556220"] = [{"values":[{"sourceSpan":{"start":[58,1],"name":".spago/polyform/v0.8.0/src/Polyform/Field.purs","end":[63,4]},"score":0,"packageName":"polyform","name":"MultiChoice","moduleName":"Polyform.Field","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"tag":"RCons","contents":["name",{"tag":"TypeVar","contents":"name"},{"tag":"RCons","contents":["choices",{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeVar","contents":"opt"}]}}]},{"tag":"RCons","contents":["value",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Polyform","Validation"],"V"]},{"tag":"TypeVar","contents":"e"}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"opt"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}}]},{"tag":"TypeVar","contents":"attrs"}]}]}]}]},"arguments":[["e",null],["opt",null],["attrs",null],["name",null]]}],"tag":"TypeSynonymResult"},"hashAnchor":"t","comments":"This field can be used to represent for example multiple checkboxes with the same\n`name` or `select multiple` - it's final value is record with all elements\nbeing Booleans.\n\nResult type for `MultiChoice` field can be statically and generically generated\nby helpers from `Field.Generic`, so you can use sum type or \"Symbol list\" which\n(`Variant` stripped down to just a label) is implemented in `Field.Generic.Option` module.\n\nIf you provide type like:\n\n `data Choices = C1 | C2 | C3`\n\n or\n\n type Choices = \"C1\" :- \"C2\" :- Nil\n\nYou can expect something like this as a result of validation\n(derived from `Field.Generic.multiChoiceParser`):\n\n  { C1 ∷ Boolean\n  , C2 ∷ Boolean\n  , C3 ∷ Boolean\n  }\n\n\nOf course you can provide your own representation for choices like list of `Strings` etc.\n\n"}],"tag":"SearchResult"}]