// This file was generated by purescript-docs-search
window.DocsSearchTypeIndex["426834458"] = [{"values":[{"sourceSpan":{"start":[11379,1],"name":".spago/react-basic-native/v0.1.3/src/React/Basic/Native/Generated.purs","end":[11483,4]},"packageName":"react-basic-native","name":"TextInputProps","moduleName":"React.Basic.Native.Generated","info":{"values":[{"type":{"tag":"RCons","contents":["accessibilityActions",{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},{"tag":"RCons","contents":["accessibilityComponentType",{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"RCons","contents":["accessibilityElementsHidden",{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]},{"tag":"RCons","contents":["accessibilityHint",{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"RCons","contents":["accessibilityIgnoresInvertColors",{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]},{"tag":"RCons","contents":["accessibilityLabel",{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"RCons","contents":["accessibilityLiveRegion",{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"RCons","contents":["accessibilityRole",{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"RCons","contents":["accessibilityStates",{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},{"tag":"RCons","contents":["accessibilityTraits",{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},{"tag":"RCons","contents":["accessibilityViewIsModal",{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]},{"tag":"RCons","contents":["accessible",{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]},{"tag":"RCons","contents":["allowFontScaling",{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]},{"tag":"RCons","contents":["autoCapitalize",{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"RCons","contents":["autoCompleteType",{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"RCons","contents":["autoCorrect",{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]},{"tag":"RCons","contents":["autoFocus",{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]},{"tag":"RCons","contents":["blurOnSubmit",{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]},{"tag":"RCons","contents":["caretHidden",{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]},{"tag":"RCons","contents":["clearButtonMode",{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"RCons","contents":["clearTextOnFocus",{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]},{"tag":"RCons","contents":["collapsable",{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]},{"tag":"RCons","contents":["contextMenuHidden",{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]},{"tag":"RCons","contents":["dataDetectorTypes",{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},{"tag":"RCons","contents":["defaultValue",{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"RCons","contents":["disableFullscreenUI",{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]},{"tag":"RCons","contents":["editable",{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]},{"tag":"RCons","contents":["enablesReturnKeyAutomatically",{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]},{"tag":"RCons","contents":["hasTVPreferredFocus",{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]},{"tag":"RCons","contents":["hitSlop",{"tag":"TypeConstructor","contents":[["React","Basic","Native","Generated"],"Insets"]},{"tag":"RCons","contents":["importantForAccessibility",{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"RCons","contents":["inlineImageLeft",{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"RCons","contents":["inlineImagePadding",{"tag":"TypeConstructor","contents":[["Prim"],"Number"]},{"tag":"RCons","contents":["inputAccessoryViewID",{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"RCons","contents":["isTVSelectable",{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]},{"tag":"RCons","contents":["keyboardAppearance",{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"RCons","contents":["keyboardType",{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"RCons","contents":["maxFontSizeMultiplier",{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"RCons","contents":["maxLength",{"tag":"TypeConstructor","contents":[["Prim"],"Number"]},{"tag":"RCons","contents":["multiline",{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]},{"tag":"RCons","contents":["nativeID",{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"RCons","contents":["needsOffscreenAlphaCompositing",{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]},{"tag":"RCons","contents":["numberOfLines",{"tag":"TypeConstructor","contents":[["Prim"],"Number"]},{"tag":"RCons","contents":["onAccessibilityAction",{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},{"tag":"RCons","contents":["onAccessibilityTap",{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},{"tag":"RCons","contents":["onBlur",{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Effect","Uncurried"],"EffectFn1"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["React","Basic","Native","Events"],"NativeSyntheticEvent"]},{"tag":"TypeConstructor","contents":[["React","Basic","Native","Generated"],"TextInputFocusEventData"]}]}}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},{"tag":"RCons","contents":["onChange",{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Effect","Uncurried"],"EffectFn1"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["React","Basic","Native","Events"],"NativeSyntheticEvent"]},{"tag":"TypeConstructor","contents":[["React","Basic","Native","Generated"],"TextInputChangeEventData"]}]}}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},{"tag":"RCons","contents":["onChangeText",{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Effect","Uncurried"],"EffectFn1"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},{"tag":"RCons","contents":["onContentSizeChange",{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Effect","Uncurried"],"EffectFn1"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["React","Basic","Native","Events"],"NativeSyntheticEvent"]},{"tag":"TypeConstructor","contents":[["React","Basic","Native","Generated"],"TextInputContentSizeChangeEventData"]}]}}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},{"tag":"RCons","contents":["onEndEditing",{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Effect","Uncurried"],"EffectFn1"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["React","Basic","Native","Events"],"NativeSyntheticEvent"]},{"tag":"TypeConstructor","contents":[["React","Basic","Native","Generated"],"TextInputEndEditingEventData"]}]}}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},{"tag":"RCons","contents":["onFocus",{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Effect","Uncurried"],"EffectFn1"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["React","Basic","Native","Events"],"NativeSyntheticEvent"]},{"tag":"TypeConstructor","contents":[["React","Basic","Native","Generated"],"TextInputFocusEventData"]}]}}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},{"tag":"RCons","contents":["onKeyPress",{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Effect","Uncurried"],"EffectFn1"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["React","Basic","Native","Events"],"NativeSyntheticEvent"]},{"tag":"TypeConstructor","contents":[["React","Basic","Native","Generated"],"TextInputKeyPressEventData"]}]}}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},{"tag":"RCons","contents":["onLayout",{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Effect","Uncurried"],"EffectFn1"]},{"tag":"TypeConstructor","contents":[["React","Basic","Native","Generated"],"LayoutChangeEvent"]}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},{"tag":"RCons","contents":["onMagicTap",{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},{"tag":"RCons","contents":["onMoveShouldSetResponder",{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Effect","Uncurried"],"EffectFn1"]},{"tag":"TypeConstructor","contents":[["React","Basic","Native","Generated"],"GestureResponderEvent"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},{"tag":"RCons","contents":["onMoveShouldSetResponderCapture",{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Effect","Uncurried"],"EffectFn1"]},{"tag":"TypeConstructor","contents":[["React","Basic","Native","Generated"],"GestureResponderEvent"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},{"tag":"RCons","contents":["onResponderEnd",{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Effect","Uncurried"],"EffectFn1"]},{"tag":"TypeConstructor","contents":[["React","Basic","Native","Generated"],"GestureResponderEvent"]}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},{"tag":"RCons","contents":["onResponderGrant",{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Effect","Uncurried"],"EffectFn1"]},{"tag":"TypeConstructor","contents":[["React","Basic","Native","Generated"],"GestureResponderEvent"]}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},{"tag":"RCons","contents":["onResponderMove",{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Effect","Uncurried"],"EffectFn1"]},{"tag":"TypeConstructor","contents":[["React","Basic","Native","Generated"],"GestureResponderEvent"]}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},{"tag":"RCons","contents":["onResponderReject",{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Effect","Uncurried"],"EffectFn1"]},{"tag":"TypeConstructor","contents":[["React","Basic","Native","Generated"],"GestureResponderEvent"]}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},{"tag":"RCons","contents":["onResponderRelease",{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Effect","Uncurried"],"EffectFn1"]},{"tag":"TypeConstructor","contents":[["React","Basic","Native","Generated"],"GestureResponderEvent"]}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},{"tag":"RCons","contents":["onResponderStart",{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Effect","Uncurried"],"EffectFn1"]},{"tag":"TypeConstructor","contents":[["React","Basic","Native","Generated"],"GestureResponderEvent"]}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},{"tag":"RCons","contents":["onResponderTerminate",{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Effect","Uncurried"],"EffectFn1"]},{"tag":"TypeConstructor","contents":[["React","Basic","Native","Generated"],"GestureResponderEvent"]}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},{"tag":"RCons","contents":["onResponderTerminationRequest",{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Effect","Uncurried"],"EffectFn1"]},{"tag":"TypeConstructor","contents":[["React","Basic","Native","Generated"],"GestureResponderEvent"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},{"tag":"RCons","contents":["onScroll",{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Effect","Uncurried"],"EffectFn1"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["React","Basic","Native","Events"],"NativeSyntheticEvent"]},{"tag":"TypeConstructor","contents":[["React","Basic","Native","Generated"],"TextInputScrollEventData"]}]}}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},{"tag":"RCons","contents":["onSelectionChange",{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Effect","Uncurried"],"EffectFn1"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["React","Basic","Native","Events"],"NativeSyntheticEvent"]},{"tag":"TypeConstructor","contents":[["React","Basic","Native","Generated"],"TextInputSelectionChangeEventData"]}]}}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},{"tag":"RCons","contents":["onStartShouldSetResponder",{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Effect","Uncurried"],"EffectFn1"]},{"tag":"TypeConstructor","contents":[["React","Basic","Native","Generated"],"GestureResponderEvent"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},{"tag":"RCons","contents":["onStartShouldSetResponderCapture",{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Effect","Uncurried"],"EffectFn1"]},{"tag":"TypeConstructor","contents":[["React","Basic","Native","Generated"],"GestureResponderEvent"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},{"tag":"RCons","contents":["onSubmitEditing",{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Effect","Uncurried"],"EffectFn1"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["React","Basic","Native","Events"],"NativeSyntheticEvent"]},{"tag":"TypeConstructor","contents":[["React","Basic","Native","Generated"],"TextInputSubmitEditingEventData"]}]}}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},{"tag":"RCons","contents":["onTouchCancel",{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Effect","Uncurried"],"EffectFn1"]},{"tag":"TypeConstructor","contents":[["React","Basic","Native","Generated"],"GestureResponderEvent"]}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},{"tag":"RCons","contents":["onTouchEnd",{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Effect","Uncurried"],"EffectFn1"]},{"tag":"TypeConstructor","contents":[["React","Basic","Native","Generated"],"GestureResponderEvent"]}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},{"tag":"RCons","contents":["onTouchEndCapture",{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Effect","Uncurried"],"EffectFn1"]},{"tag":"TypeConstructor","contents":[["React","Basic","Native","Generated"],"GestureResponderEvent"]}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},{"tag":"RCons","contents":["onTouchMove",{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Effect","Uncurried"],"EffectFn1"]},{"tag":"TypeConstructor","contents":[["React","Basic","Native","Generated"],"GestureResponderEvent"]}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},{"tag":"RCons","contents":["onTouchStart",{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Effect","Uncurried"],"EffectFn1"]},{"tag":"TypeConstructor","contents":[["React","Basic","Native","Generated"],"GestureResponderEvent"]}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},{"tag":"RCons","contents":["placeholder",{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"RCons","contents":["placeholderTextColor",{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"RCons","contents":["pointerEvents",{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"RCons","contents":["removeClippedSubviews",{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]},{"tag":"RCons","contents":["renderToHardwareTextureAndroid",{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]},{"tag":"RCons","contents":["returnKeyLabel",{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"RCons","contents":["returnKeyType",{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"RCons","contents":["scrollEnabled",{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]},{"tag":"RCons","contents":["secureTextEntry",{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]},{"tag":"RCons","contents":["selectTextOnFocus",{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]},{"tag":"RCons","contents":["selection",{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"tag":"RCons","contents":["start",{"tag":"TypeConstructor","contents":[["Prim"],"Number"]},{"tag":"RCons","contents":["end",{"tag":"TypeConstructor","contents":[["Prim"],"Number"]},{"tag":"REmpty","contents":{}}]}]}]},{"tag":"RCons","contents":["selectionColor",{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"RCons","contents":["selectionState",{"tag":"TypeConstructor","contents":[["React","Basic","Native","Generated"],"DocumentSelectionState"]},{"tag":"RCons","contents":["shouldRasterizeIOS",{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]},{"tag":"RCons","contents":["spellCheck",{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]},{"tag":"RCons","contents":["style",{"tag":"TypeConstructor","contents":[["React","Basic","DOM","Internal"],"CSS"]},{"tag":"RCons","contents":["testID",{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"RCons","contents":["textAlignVertical",{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"RCons","contents":["textBreakStrategy",{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"RCons","contents":["textContentType",{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"RCons","contents":["tvParallaxMagnification",{"tag":"TypeConstructor","contents":[["Prim"],"Number"]},{"tag":"RCons","contents":["tvParallaxProperties",{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"tag":"RCons","contents":["enabled",{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]},{"tag":"RCons","contents":["shiftDistanceX",{"tag":"TypeConstructor","contents":[["Prim"],"Number"]},{"tag":"RCons","contents":["shiftDistanceY",{"tag":"TypeConstructor","contents":[["Prim"],"Number"]},{"tag":"RCons","contents":["tiltAngle",{"tag":"TypeConstructor","contents":[["Prim"],"Number"]},{"tag":"RCons","contents":["magnification",{"tag":"TypeConstructor","contents":[["Prim"],"Number"]},{"tag":"RCons","contents":["pressMagnification",{"tag":"TypeConstructor","contents":[["Prim"],"Number"]},{"tag":"RCons","contents":["pressDuration",{"tag":"TypeConstructor","contents":[["Prim"],"Number"]},{"tag":"RCons","contents":["pressDelay",{"tag":"TypeConstructor","contents":[["Prim"],"Number"]},{"tag":"REmpty","contents":{}}]}]}]}]}]}]}]}]}]},{"tag":"RCons","contents":["tvParallaxShiftDistanceX",{"tag":"TypeConstructor","contents":[["Prim"],"Number"]},{"tag":"RCons","contents":["tvParallaxShiftDistanceY",{"tag":"TypeConstructor","contents":[["Prim"],"Number"]},{"tag":"RCons","contents":["tvParallaxTiltAngle",{"tag":"TypeConstructor","contents":[["Prim"],"Number"]},{"tag":"RCons","contents":["underlineColorAndroid",{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"RCons","contents":["value",{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"RCons","contents":["key",{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"RCons","contents":["children",{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeConstructor","contents":[["React","Basic"],"JSX"]}]},{"tag":"REmpty","contents":{}}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]},"arguments":[]}],"tag":"TypeSynonymResult"},"hashAnchor":"t","comments":"see <https://facebook.github.io/react-native/docs/textinput.html#props>\n- `accessibilityActions`\n       Provides an array of custom actions available for accessibility.\n        __*platform* ios__\n- `accessibilityComponentType`\n       In some cases, we also want to alert the end user of the type of selected component (i.e., that it is a “button”).\n       If we were using native buttons, this would work automatically. Since we are using javascript, we need to\n       provide a bit more context for TalkBack. To do so, you must specify the ‘accessibilityComponentType’ property\n       for any UI component. For instances, we support ‘button’, ‘radiobutton_checked’ and ‘radiobutton_unchecked’ and so on.\n        __*platform* android__\n- `accessibilityElementsHidden`\n       A Boolean value indicating whether the accessibility elements contained within this accessibility element\n       are hidden to the screen reader.\n        __*platform* ios__\n- `accessibilityHint`\n       An accessibility hint helps users understand what will happen when they perform an action on the accessibility element when that result is not obvious from the accessibility label.\n- `accessibilityIgnoresInvertColors`\n       https://facebook.github.io/react-native/docs/accessibility#accessibilityignoresinvertcolorsios\n        __*platform* ios__\n- `accessibilityLabel`\n       Overrides the text that's read by the screen reader when the user interacts with the element. By default, the\n       label is constructed by traversing all the children and accumulating all the Text nodes separated by space.\n- `accessibilityLiveRegion`\n       Indicates to accessibility services whether the user should be notified when this view changes.\n       Works for Android API >= 19 only.\n       See http://developer.android.com/reference/android/view/View.html#attr_android:accessibilityLiveRegion for references.\n        __*platform* android__\n- `accessibilityRole`\n       Accessibility Role tells a person using either VoiceOver on iOS or TalkBack on Android the type of element that is focused on.\n- `accessibilityStates`\n       Accessibility State tells a person using either VoiceOver on iOS or TalkBack on Android the state of the element currently focused on.\n- `accessibilityTraits`\n       Accessibility traits tell a person using VoiceOver what kind of element they have selected.\n       Is this element a label? A button? A header? These questions are answered by accessibilityTraits.\n        __*platform* ios__\n- `accessibilityViewIsModal`\n       A Boolean value indicating whether VoiceOver should ignore the elements within views that are siblings of the receiver.\n        __*platform* ios__\n- `accessible`\n       When true, indicates that the view is an accessibility element.\n       By default, all the touchable elements are accessible.\n- `allowFontScaling`\n       Specifies whether fonts should scale to respect Text Size accessibility settings.\n       The default is `true`.\n- `autoCapitalize`\n       Can tell TextInput to automatically capitalize certain characters.\n             characters: all characters,\n             words: first letter of each word\n             sentences: first letter of each sentence (default)\n             none: don't auto capitalize anything\n       https://facebook.github.io/react-native/docs/textinput.html#autocapitalize\n- `autoCompleteType`\n       Determines which content to suggest on auto complete, e.g.`username`.\n       To disable auto complete, use `off`.\n       *Android Only*\n       The following values work on Android only:\n       - `username`\n       - `password`\n       - `email`\n       - `name`\n       - `tel`\n       - `street-address`\n       - `postal-code`\n       - `cc-number`\n       - `cc-csc`\n       - `cc-exp`\n       - `cc-exp-month`\n       - `cc-exp-year`\n       - `off`\n- `autoCorrect`\n       If false, disables auto-correct.\n       The default value is true.\n- `autoFocus`\n       If true, focuses the input on componentDidMount.\n       The default value is false.\n- `blurOnSubmit`\n       If true, the text field will blur when submitted.\n       The default value is true.\n- `caretHidden`\n       If true, caret is hidden. The default value is false.\n- `clearButtonMode`\n       enum('never', 'while-editing', 'unless-editing', 'always')\n       When the clear button should appear on the right side of the text view\n- `clearTextOnFocus`\n       If true, clears the text field automatically when editing begins\n- `collapsable`\n       Views that are only used to layout their children or otherwise don't draw anything\n       may be automatically removed from the native hierarchy as an optimization.\n       Set this property to false to disable this optimization and ensure that this View exists in the native view hierarchy.\n- `contextMenuHidden`\n       If true, context menu is hidden. The default value is false.\n- `dataDetectorTypes`\n       Determines the types of data converted to clickable URLs in the text input.\n       Only valid if `multiline={true}` and `editable={false}`.\n       By default no data types are detected.\n       You can provide one type or an array of many types.\n       Possible values for `dataDetectorTypes` are:\n       - `'phoneNumber'`\n       - `'link'`\n       - `'address'`\n       - `'calendarEvent'`\n       - `'none'`\n       - `'all'`\n- `defaultValue`\n       Provides an initial value that will change when the user starts typing.\n       Useful for simple use-cases where you don't want to deal with listening to events\n       and updating the value prop to keep the controlled state in sync.\n- `disableFullscreenUI`\n       When false, if there is a small amount of space available around a text input (e.g. landscape orientation on a phone),\n          the OS may choose to have the user edit the text inside of a full screen text input mode.\n       When true, this feature is disabled and users will always edit the text directly inside of the text input.\n       Defaults to false.\n- `editable`\n       If false, text is not editable. The default value is true.\n- `enablesReturnKeyAutomatically`\n       If true, the keyboard disables the return key when there is no text and automatically enables it when there is text.\n       The default value is false.\n- `hasTVPreferredFocus`\n       *(Apple TV only)* May be set to true to force the Apple TV focus engine to move focus to this view.\n        __*platform* ios__\n- `hitSlop`\n       This defines how far a touch event can start away from the view.\n       Typical interface guidelines recommend touch targets that are at least\n       30 - 40 points/density-independent pixels. If a Touchable view has\n       a height of 20 the touchable height can be extended to 40 with\n       hitSlop={{top: 10, bottom: 10, left: 0, right: 0}}\n       NOTE The touch area never extends past the parent view bounds and\n       the Z-index of sibling views always takes precedence if a touch\n       hits two overlapping views.\n- `importantForAccessibility`\n       Controls how view is important for accessibility which is if it fires accessibility events\n       and if it is reported to accessibility services that query the screen.\n       Works for Android only. See http://developer.android.com/reference/android/R.attr.html#importantForAccessibility for references.\n       Possible values:\n             'auto' - The system determines whether the view is important for accessibility - default (recommended).\n             'yes' - The view is important for accessibility.\n             'no' - The view is not important for accessibility.\n             'no-hide-descendants' - The view is not important for accessibility, nor are any of its descendant views.\n- `inlineImageLeft`\n       If defined, the provided image resource will be rendered on the left.\n- `inlineImagePadding`\n       Padding between the inline image, if any, and the text input itself.\n- `inputAccessoryViewID`\n       Used to connect to an InputAccessoryView. Not part of react-natives documentation, but present in examples and\n       code.\n       See https://facebook.github.io/react-native/docs/inputaccessoryview.html for more information.\n- `isTVSelectable`\n       *(Apple TV only)* When set to true, this view will be focusable\n       and navigable using the Apple TV remote.\n        __*platform* ios__\n- `keyboardAppearance`\n       Determines the color of the keyboard.\n- `keyboardType`\n       enum(\"default\", 'numeric', 'email-address', \"ascii-capable\", 'numbers-and-punctuation', 'url', 'number-pad', 'phone-pad', 'name-phone-pad',\n       'decimal-pad', 'twitter', 'web-search', 'visible-password')\n       Determines which keyboard to open, e.g.numeric.\n       The following values work across platforms: - default - numeric - email-address - phone-pad\n       The following values work on iOS: - ascii-capable - numbers-and-punctuation - url - number-pad - name-phone-pad - decimal-pad - twitter - web-search\n       The following values work on Android: - visible-password\n- `maxFontSizeMultiplier`\n       Specifies largest possible scale a font can reach when allowFontScaling is enabled. Possible values:\n       - null/undefined (default): inherit from the parent node or the global default (0)\n       - 0: no max, ignore parent/global default\n       - >= 1: sets the maxFontSizeMultiplier of this node to this value\n- `maxLength`\n       Limits the maximum number of characters that can be entered.\n       Use this instead of implementing the logic in JS to avoid flicker.\n- `multiline`\n       If true, the text input can be multiple lines. The default value is false.\n- `nativeID`\n       Used to reference react managed views from native code.\n- `needsOffscreenAlphaCompositing`\n       Whether this view needs to rendered offscreen and composited with an alpha in order to preserve 100% correct colors and blending behavior.\n       The default (false) falls back to drawing the component and its children\n       with an alpha applied to the paint used to draw each element instead of rendering the full component offscreen and compositing it back with an alpha value.\n       This default may be noticeable and undesired in the case where the View you are setting an opacity on\n       has multiple overlapping elements (e.g. multiple overlapping Views, or text and a background).\n       Rendering offscreen to preserve correct alpha behavior is extremely expensive\n       and hard to debug for non-native developers, which is why it is not turned on by default.\n       If you do need to enable this property for an animation,\n       consider combining it with renderToHardwareTextureAndroid if the view contents are static (i.e. it doesn't need to be redrawn each frame).\n       If that property is enabled, this View will be rendered off-screen once,\n       saved in a hardware texture, and then composited onto the screen with an alpha each frame without having to switch rendering targets on the GPU.\n- `numberOfLines`\n       Sets the number of lines for a TextInput.\n       Use it with multiline set to true to be able to fill the lines.\n- `onAccessibilityAction`\n       When `accessible` is true, the system will try to invoke this function\n       when the user performs an accessibility custom action.\n        __*platform* ios__\n- `onAccessibilityTap`\n       When `accessible` is true, the system will try to invoke this function when the user performs accessibility tap gesture.\n        __*platform* ios__\n- `onBlur`\n       Callback that is called when the text input is blurred\n- `onChange`\n       Callback that is called when the text input's text changes.\n- `onChangeText`\n       Callback that is called when the text input's text changes.\n       Changed text is passed as an argument to the callback handler.\n- `onContentSizeChange`\n       Callback that is called when the text input's content size changes.\n       This will be called with\n       `{ nativeEvent: { contentSize: { width, height } } }`.\n       Only called for multiline text inputs.\n- `onEndEditing`\n       Callback that is called when text input ends.\n- `onFocus`\n       Callback that is called when the text input is focused\n- `onKeyPress`\n       Callback that is called when a key is pressed.\n       This will be called with\n         `{ nativeEvent: { key: keyValue } }`\n       where keyValue is 'Enter' or 'Backspace' for respective keys and the typed-in character otherwise including ' ' for space.\n       Fires before onChange callbacks.\n       Note: on Android only the inputs from soft keyboard are handled, not the hardware keyboard inputs.\n- `onLayout`\n       Invoked on mount and layout changes with\n       {nativeEvent: { layout: {x, y, width, height}}}.\n- `onMagicTap`\n       When accessible is true, the system will invoke this function when the user performs the magic tap gesture.\n        __*platform* ios__\n- `onMoveShouldSetResponder`\n       Called for every touch move on the View when it is not the responder: does this view want to \"claim\" touch responsiveness?\n- `onMoveShouldSetResponderCapture`\n       onStartShouldSetResponder and onMoveShouldSetResponder are called with a bubbling pattern,\n       where the deepest node is called first.\n       That means that the deepest component will become responder when multiple Views return true for *ShouldSetResponder handlers.\n       This is desirable in most cases, because it makes sure all controls and buttons are usable.\n       However, sometimes a parent will want to make sure that it becomes responder.\n       This can be handled by using the capture phase.\n       Before the responder system bubbles up from the deepest component,\n       it will do a capture phase, firing on*ShouldSetResponderCapture.\n       So if a parent View wants to prevent the child from becoming responder on a touch start,\n       it should have a onStartShouldSetResponderCapture handler which returns true.\n- `onResponderEnd`\n       If the View returns true and attempts to become the responder, one of the following will happen:\n- `onResponderGrant`\n       The View is now responding for touch events.\n       This is the time to highlight and show the user what is happening\n- `onResponderMove`\n       If the view is responding, the following handlers can be called:\n       The user is moving their finger\n- `onResponderReject`\n       Something else is the responder right now and will not release it\n- `onResponderRelease`\n       Fired at the end of the touch, ie \"touchUp\"\n- `onResponderTerminate`\n       The responder has been taken from the View.\n       Might be taken by other views after a call to onResponderTerminationRequest,\n       or might be taken by the OS without asking (happens with control center/ notification center on iOS)\n- `onResponderTerminationRequest`\n       Something else wants to become responder.\n       Should this view release the responder? Returning true allows release\n- `onScroll`\n       Invoked on content scroll with\n         `{ nativeEvent: { contentOffset: { x, y } } }`.\n       May also contain other properties from ScrollEvent but on Android contentSize is not provided for performance reasons.\n- `onSelectionChange`\n       Callback that is called when the text input selection is changed.\n- `onStartShouldSetResponder`\n       A view can become the touch responder by implementing the correct negotiation methods.\n       There are two methods to ask the view if it wants to become responder:\n       Does this view want to become responder on the start of a touch?\n- `onStartShouldSetResponderCapture`\n       onStartShouldSetResponder and onMoveShouldSetResponder are called with a bubbling pattern,\n       where the deepest node is called first.\n       That means that the deepest component will become responder when multiple Views return true for *ShouldSetResponder handlers.\n       This is desirable in most cases, because it makes sure all controls and buttons are usable.\n       However, sometimes a parent will want to make sure that it becomes responder.\n       This can be handled by using the capture phase.\n       Before the responder system bubbles up from the deepest component,\n       it will do a capture phase, firing on*ShouldSetResponderCapture.\n       So if a parent View wants to prevent the child from becoming responder on a touch start,\n       it should have a onStartShouldSetResponderCapture handler which returns true.\n- `onSubmitEditing`\n       Callback that is called when the text input's submit button is pressed.\n- `placeholder`\n       The string that will be rendered before text input has been entered\n- `placeholderTextColor`\n       The text color of the placeholder string\n- `pointerEvents`\n       In the absence of auto property, none is much like CSS's none value. box-none is as if you had applied the CSS class:\n       .box-none {\n          pointer-events: none;\n       }\n       .box-none * {\n          pointer-events: all;\n       }\n       box-only is the equivalent of\n       .box-only {\n          pointer-events: all;\n       }\n       .box-only * {\n          pointer-events: none;\n       }\n       But since pointerEvents does not affect layout/appearance, and we are already deviating from the spec by adding additional modes,\n       we opt to not include pointerEvents on style. On some platforms, we would need to implement it as a className anyways. Using style or not is an implementation detail of the platform.\n- `removeClippedSubviews`\n       This is a special performance property exposed by RCTView and is useful for scrolling content when there are many subviews,\n       most of which are offscreen. For this property to be effective, it must be applied to a view that contains many subviews that extend outside its bound.\n       The subviews must also have overflow: hidden, as should the containing view (or one of its superviews).\n- `renderToHardwareTextureAndroid`\n       Whether this view should render itself (and all of its children) into a single hardware texture on the GPU.\n       On Android, this is useful for animations and interactions that only modify opacity, rotation, translation, and/or scale:\n       in those cases, the view doesn't have to be redrawn and display lists don't need to be re-executed. The texture can just be\n       re-used and re-composited with different parameters. The downside is that this can use up limited video memory, so this prop should be set back to false at the end of the interaction/animation.\n- `returnKeyLabel`\n       Sets the return key to the label. Use it instead of `returnKeyType`.\n        __*platform* android__\n- `returnKeyType`\n       enum('default', 'go', 'google', 'join', 'next', 'route', 'search', 'send', 'yahoo', 'done', 'emergency-call')\n       Determines how the return key should look.\n- `scrollEnabled`\n       If false, scrolling of the text view will be disabled. The default value is true. Only works with multiline={true}\n- `secureTextEntry`\n       If true, the text input obscures the text entered so that sensitive text like passwords stay secure.\n       The default value is false.\n- `selectTextOnFocus`\n       If true, all text will automatically be selected on focus\n- `selection`\n       The start and end of the text input's selection. Set start and end to\n       the same value to position the cursor.\n- `selectionColor`\n       The highlight (and cursor on ios) color of the text input\n- `selectionState`\n       See DocumentSelectionState.js, some state that is responsible for maintaining selection information for a document\n- `shouldRasterizeIOS`\n       Whether this view should be rendered as a bitmap before compositing.\n       On iOS, this is useful for animations and interactions that do not modify this component's dimensions nor its children;\n       for example, when translating the position of a static view, rasterization allows the renderer to reuse a cached bitmap of a static view\n       and quickly composite it during each frame.\n       Rasterization incurs an off-screen drawing pass and the bitmap consumes memory.\n       Test and measure when using this property.\n- `spellCheck`\n       If false, disables spell-check style (i.e. red underlines). The default value is inherited from autoCorrect\n- `style`\n       Styles\n- `testID`\n       Used to locate this view in end-to-end tests\n- `textAlignVertical`\n       Vertically align text when `multiline` is set to true\n- `textBreakStrategy`\n       Set text break strategy on Android API Level 23+, possible values are simple, highQuality, balanced\n       The default value is simple.\n- `textContentType`\n       Give the keyboard and the system information about the expected\n       semantic meaning for the content that users enter.\n       For iOS 11+ you can set `textContentType` to `username` or `password` to\n       enable autofill of login details from the device keychain.\n       For iOS 12+ `newPassword` can be used to indicate a new password input the\n       user may want to save in the keychain, and `oneTimeCode` can be used to indicate\n       that a field can be autofilled by a code arriving in an SMS.\n       To disable autofill, set textContentType to `none`.\n       Possible values for `textContentType` are:\n         - `'none'`\n         - `'URL'`\n         - `'addressCity'`\n         - `'addressCityAndState'`\n         - `'addressState'`\n         - `'countryName'`\n         - `'creditCardNumber'`\n         - `'emailAddress'`\n         - `'familyName'`\n         - `'fullStreetAddress'`\n         - `'givenName'`\n         - `'jobTitle'`\n         - `'location'`\n         - `'middleName'`\n         - `'name'`\n         - `'namePrefix'`\n         - `'nameSuffix'`\n         - `'nickname'`\n         - `'organizationName'`\n         - `'postalCode'`\n         - `'streetAddressLine1'`\n         - `'streetAddressLine2'`\n         - `'sublocality'`\n         - `'telephoneNumber'`\n         - `'username'`\n         - `'password'`\n         - `'newPassword'`\n         - `'oneTimeCode'`\n- `tvParallaxMagnification`\n       *(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 1.0.\n        __*platform* ios__\n- `tvParallaxProperties`\n       *(Apple TV only)* Object with properties to control Apple TV parallax effects.\n        __*platform* ios__\n- `tvParallaxShiftDistanceX`\n       *(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 2.0.\n        __*platform* ios__\n- `tvParallaxShiftDistanceY`\n       *(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 2.0.\n        __*platform* ios__\n- `tvParallaxTiltAngle`\n       *(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 0.05.\n        __*platform* ios__\n- `underlineColorAndroid`\n       The color of the textInput underline.\n- `value`\n       The value to show for the text input. TextInput is a controlled component,\n       which means the native value will be forced to match this value prop if provided.\n       For most uses this works great, but in some cases this may cause flickering - one common cause is preventing edits by keeping value the same.\n       In addition to simply setting the same value, either set editable={false},\n       or set/update maxLength to prevent unwanted edits without flicker.\n"}],"tag":"SearchResult"}]