// This file was generated by purescript-docs-search
window.DocsSearchTypeIndex["474907625"] = [{"values":[{"sourceSpan":{"start":[80,1],"name":".spago/web-file/v2.3.0/src/Web/File/Blob.purs","end":[80,73]},"score":0,"packageName":"web-file","name":"slice","moduleName":"Web.File.Blob","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","MediaType"],"MediaType"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Web","File","Blob"],"StartByte"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Web","File","Blob"],"EndByte"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Web","File","Blob"],"Blob"]}]},{"tag":"TypeConstructor","contents":[["Web","File","Blob"],"Blob"]}]}]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Creates a new `Blob` object (with specified `MediaType`), containing the\ndata in the specified range of bytes of the source Blob, by setting .\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[49,1],"name":".spago/uri/v7.0.0/src/URI/Host/IPv4Address.purs","end":[49,53]},"score":0,"packageName":"uri","name":"unsafeFromInts","moduleName":"URI.Host.IPv4Address","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeConstructor","contents":[["URI","Host","IPv4Address"],"IPv4Address"]}]}]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Constructs a `IPv4Address` part unsafely: if any of the arguments are\noutside the allowable bounds, a runtime error will be thrown.\n\nThis is intended as a convenience when describing `IPv4Address`es\nstatically in PureScript code, in all other cases `fromInts` should be\nused.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[837,1],"name":".spago/optparse/v3.0.1/src/Text/PrettyPrint/Leijen.purs","end":[837,55]},"score":0,"packageName":"optparse","name":"fitsR","moduleName":"Text.PrettyPrint.Leijen","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Text","PrettyPrint","Leijen"],"LazySimpleDoc"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"@fitsR@ has a little more lookahead: assuming that nesting roughly\ncorresponds to syntactic depth, @fitsR@ checks that not only the current line\nfits, but the entire syntactic structure being formatted at this level of\nindentation fits. If we were to remove the second case for @SLine@, we would\ncheck that not only the current structure fits, but also the rest of the\ndocument, which would be slightly more intelligent but would have exponential\nruntime (and is prohibitively expensive in practice).\np = pagewidth\nm = minimum nesting level to fit in\nw = the width in which to fit the first line\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[819,1],"name":".spago/optparse/v3.0.1/src/Text/PrettyPrint/Leijen.purs","end":[819,55]},"score":0,"packageName":"optparse","name":"fits1","moduleName":"Text.PrettyPrint.Leijen","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Text","PrettyPrint","Leijen"],"LazySimpleDoc"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"@fits1@ does 1 line lookahead.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[73,1],"name":".spago/node-buffer/v6.0.0/src/Node/Buffer/Immutable.purs","end":[73,72]},"score":0,"packageName":"node-buffer","name":"readString","moduleName":"Node.Buffer.Immutable","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Node","Encoding"],"Encoding"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Node","Buffer","Types"],"Offset"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Node","Buffer","Types"],"Offset"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Node","Buffer","Immutable"],"ImmutableBuffer"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Reads a section of a buffer as a string with the specified encoding.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[63,1],"name":".spago/drawing/v4.0.0/src/Graphics/Drawing.purs","end":[63,59]},"score":0,"packageName":"drawing","name":"rectangle","moduleName":"Graphics.Drawing","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Graphics","Drawing"],"Shape"]}]}]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Create a rectangle from the left, top, width and height parameters.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[386,1],"name":".spago/quantities/v10.0.0/src/Data/Units.purs","end":[387,33]},"score":0,"packageName":"quantities","name":"makeNonStandard","moduleName":"Data.Units","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Helper function to create a non-standard unit.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[193,1],"name":".spago/colors/v5.0.0/src/Color.purs","end":[193,50]},"score":0,"packageName":"colors","name":"hsva","moduleName":"Color","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Color"],"Color"]}]}]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Create a `Color` from Hue, Saturation, Value and Alpha values. The\nHue is given in degrees, as a `Number` between 0.0 and 360.0. Saturation,\nValue and Alpha are numbers between 0.0 and 1.0.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[178,1],"name":".spago/colors/v5.0.0/src/Color.purs","end":[178,54]},"score":0,"packageName":"colors","name":"hsla","moduleName":"Color","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Color"],"Color"]}]}]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Create a `Color` from Hue, Saturation, Lightness and Alpha values. The\nHue is given in degrees, as a `Number` between 0.0 and 360.0. Saturation,\nLightness and Alpha are numbers between 0.0 and 1.0.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[165,1],"name":".spago/colors/v5.0.0/src/Color.purs","end":[165,55]},"score":0,"packageName":"colors","name":"rgba'","moduleName":"Color","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Color"],"Color"]}]}]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Create a `Color` from RGB and alpha values between 0.0 and 1.0.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[129,1],"name":".spago/colors/v5.0.0/src/Color.purs","end":[129,45]},"score":0,"packageName":"colors","name":"rgba","moduleName":"Color","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Color"],"Color"]}]}]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Create a `Color` from integer RGB values between 0 and 255 and a floating\npoint alpha value between 0.0 and 1.0.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[108,1],"name":".spago/colors/v5.0.0/src/Color/Scale.purs","end":[108,72]},"score":0,"packageName":"colors","name":"combineStops'","moduleName":"Color.Scale","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Color","Scale"],"ColorStops"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Color","Scale"],"ColorStops"]}]},{"tag":"TypeConstructor","contents":[["Color","Scale"],"ColorStops"]}]}]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Like `combineStops`, but the width of the \"transition zone\" can be specified as the\nfirst argument.\n\nExample:\n\n``` purs\nredToBlue `combineStops epsilon x` orangeToGray\n```\n\nHere, the color at `x` will be orange and color at `x - epsilon` will be blue.\nIf we want the color at `x` to be blue, `combineStops' epsilon (x + epsilon)` could be used.\n"}],"tag":"SearchResult"}]