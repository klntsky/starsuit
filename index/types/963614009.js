// This file was generated by purescript-docs-search
window.DocsSearchTypeIndex["963614009"] = [{"values":[{"sourceSpan":{"start":[12278,1],"name":".spago/react-basic-native/v0.1.3/src/React/Basic/Native/Generated.purs","end":[12313,4]},"score":0,"packageName":"react-basic-native","name":"TouchableNativeFeedbackProps","moduleName":"React.Basic.Native.Generated","info":{"values":[{"type":{"tag":"RCons","contents":["accessibilityComponentType",{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"RCons","contents":["accessibilityElementsHidden",{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]},{"tag":"RCons","contents":["accessibilityHint",{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"RCons","contents":["accessibilityIgnoresInvertColors",{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]},{"tag":"RCons","contents":["accessibilityLabel",{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"RCons","contents":["accessibilityLiveRegion",{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"RCons","contents":["accessibilityRole",{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"RCons","contents":["accessibilityStates",{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},{"tag":"RCons","contents":["accessibilityTraits",{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},{"tag":"RCons","contents":["accessible",{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]},{"tag":"RCons","contents":["background",{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Foreign","Object"],"Object"]},{"tag":"TypeConstructor","contents":[["Foreign"],"Foreign"]}]}},{"tag":"RCons","contents":["delayLongPress",{"tag":"TypeConstructor","contents":[["Prim"],"Number"]},{"tag":"RCons","contents":["delayPressIn",{"tag":"TypeConstructor","contents":[["Prim"],"Number"]},{"tag":"RCons","contents":["delayPressOut",{"tag":"TypeConstructor","contents":[["Prim"],"Number"]},{"tag":"RCons","contents":["disabled",{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]},{"tag":"RCons","contents":["hasTVPreferredFocus",{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]},{"tag":"RCons","contents":["hitSlop",{"tag":"TypeConstructor","contents":[["React","Basic","Native","Generated"],"Insets"]},{"tag":"RCons","contents":["importantForAccessibility",{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"RCons","contents":["onAccessibilityTap",{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},{"tag":"RCons","contents":["onBlur",{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Effect","Uncurried"],"EffectFn1"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["React","Basic","Native","Events"],"NativeSyntheticEvent"]},{"tag":"TypeConstructor","contents":[["React","Basic","Native","Generated"],"TargetedEvent"]}]}}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},{"tag":"RCons","contents":["onFocus",{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Effect","Uncurried"],"EffectFn1"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["React","Basic","Native","Events"],"NativeSyntheticEvent"]},{"tag":"TypeConstructor","contents":[["React","Basic","Native","Generated"],"TargetedEvent"]}]}}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},{"tag":"RCons","contents":["onLayout",{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Effect","Uncurried"],"EffectFn1"]},{"tag":"TypeConstructor","contents":[["React","Basic","Native","Generated"],"LayoutChangeEvent"]}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},{"tag":"RCons","contents":["onLongPress",{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Effect","Uncurried"],"EffectFn1"]},{"tag":"TypeConstructor","contents":[["React","Basic","Native","Generated"],"GestureResponderEvent"]}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},{"tag":"RCons","contents":["onMagicTap",{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},{"tag":"RCons","contents":["onPress",{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Effect","Uncurried"],"EffectFn1"]},{"tag":"TypeConstructor","contents":[["React","Basic","Native","Generated"],"GestureResponderEvent"]}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},{"tag":"RCons","contents":["onPressIn",{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Effect","Uncurried"],"EffectFn1"]},{"tag":"TypeConstructor","contents":[["React","Basic","Native","Generated"],"GestureResponderEvent"]}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},{"tag":"RCons","contents":["onPressOut",{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Effect","Uncurried"],"EffectFn1"]},{"tag":"TypeConstructor","contents":[["React","Basic","Native","Generated"],"GestureResponderEvent"]}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},{"tag":"RCons","contents":["pressRetentionOffset",{"tag":"TypeConstructor","contents":[["React","Basic","Native","Generated"],"Insets"]},{"tag":"RCons","contents":["style",{"tag":"TypeConstructor","contents":[["React","Basic","DOM","Internal"],"CSS"]},{"tag":"RCons","contents":["testID",{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"RCons","contents":["tvParallaxProperties",{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"tag":"RCons","contents":["enabled",{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]},{"tag":"RCons","contents":["shiftDistanceX",{"tag":"TypeConstructor","contents":[["Prim"],"Number"]},{"tag":"RCons","contents":["shiftDistanceY",{"tag":"TypeConstructor","contents":[["Prim"],"Number"]},{"tag":"RCons","contents":["tiltAngle",{"tag":"TypeConstructor","contents":[["Prim"],"Number"]},{"tag":"RCons","contents":["magnification",{"tag":"TypeConstructor","contents":[["Prim"],"Number"]},{"tag":"RCons","contents":["pressMagnification",{"tag":"TypeConstructor","contents":[["Prim"],"Number"]},{"tag":"RCons","contents":["pressDuration",{"tag":"TypeConstructor","contents":[["Prim"],"Number"]},{"tag":"RCons","contents":["pressDelay",{"tag":"TypeConstructor","contents":[["Prim"],"Number"]},{"tag":"REmpty","contents":{}}]}]}]}]}]}]}]}]}]},{"tag":"RCons","contents":["useForeground",{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]},{"tag":"RCons","contents":["key",{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"RCons","contents":["children",{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeConstructor","contents":[["React","Basic"],"JSX"]}]},{"tag":"REmpty","contents":{}}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]},"arguments":[]}],"tag":"TypeSynonymResult"},"hashAnchor":"t","comments":"see <https://facebook.github.io/react-native/docs/touchableopacity.html#props>\n- `accessibilityComponentType`\n       In some cases, we also want to alert the end user of the type of selected component (i.e., that it is a “button”).\n       If we were using native buttons, this would work automatically. Since we are using javascript, we need to\n       provide a bit more context for TalkBack. To do so, you must specify the ‘accessibilityComponentType’ property\n       for any UI component. For instances, we support ‘button’, ‘radiobutton_checked’ and ‘radiobutton_unchecked’ and so on.\n        __*platform* android__\n- `accessibilityElementsHidden`\n       A Boolean value indicating whether the accessibility elements contained within this accessibility element\n       are hidden to the screen reader.\n        __*platform* ios__\n- `accessibilityHint`\n       An accessibility hint helps users understand what will happen when they perform an action on the accessibility element when that result is not obvious from the accessibility label.\n- `accessibilityIgnoresInvertColors`\n       https://facebook.github.io/react-native/docs/accessibility#accessibilityignoresinvertcolorsios\n        __*platform* ios__\n- `accessibilityLabel`\n       Overrides the text that's read by the screen reader when the user interacts with the element. By default, the\n       label is constructed by traversing all the children and accumulating all the Text nodes separated by space.\n- `accessibilityLiveRegion`\n       Indicates to accessibility services whether the user should be notified when this view changes.\n       Works for Android API >= 19 only.\n       See http://developer.android.com/reference/android/view/View.html#attr_android:accessibilityLiveRegion for references.\n        __*platform* android__\n- `accessibilityRole`\n       Accessibility Role tells a person using either VoiceOver on iOS or TalkBack on Android the type of element that is focused on.\n- `accessibilityStates`\n       Accessibility State tells a person using either VoiceOver on iOS or TalkBack on Android the state of the element currently focused on.\n- `accessibilityTraits`\n       Accessibility traits tell a person using VoiceOver what kind of element they have selected.\n       Is this element a label? A button? A header? These questions are answered by accessibilityTraits.\n        __*platform* ios__\n- `accessible`\n       When true, indicates that the view is an accessibility element.\n       By default, all the touchable elements are accessible.\n- `background`\n       Determines the type of background drawable that's going to be used to display feedback.\n       It takes an object with type property and extra data depending on the type.\n       It's recommended to use one of the following static methods to generate that dictionary:\n             1) TouchableNativeFeedback.SelectableBackground() - will create object that represents android theme's\n                default background for selectable elements (?android:attr/selectableItemBackground)\n             2) TouchableNativeFeedback.SelectableBackgroundBorderless() - will create object that represent android\n                theme's default background for borderless selectable elements\n                (?android:attr/selectableItemBackgroundBorderless). Available on android API level 21+\n             3) TouchableNativeFeedback.Ripple(color, borderless) - will create object that represents ripple drawable\n                with specified color (as a string). If property borderless evaluates to true the ripple will render\n                outside of the view bounds (see native actionbar buttons as an example of that behavior). This background\n                type is available on Android API level 21+\n- `delayLongPress`\n       Delay in ms, from onPressIn, before onLongPress is called.\n- `delayPressIn`\n       Delay in ms, from the start of the touch, before onPressIn is called.\n- `delayPressOut`\n       Delay in ms, from the release of the touch, before onPressOut is called.\n- `disabled`\n       If true, disable all interactions for this component.\n- `hasTVPreferredFocus`\n       *(Apple TV only)* TV preferred focus (see documentation for the View component).\n        __*platform* ios__\n- `hitSlop`\n       This defines how far your touch can start away from the button.\n       This is added to pressRetentionOffset when moving off of the button.\n       NOTE The touch area never extends past the parent view bounds and\n       the Z-index of sibling views always takes precedence if a touch hits\n       two overlapping views.\n- `importantForAccessibility`\n       Controls how view is important for accessibility which is if it fires accessibility events\n       and if it is reported to accessibility services that query the screen.\n       Works for Android only. See http://developer.android.com/reference/android/R.attr.html#importantForAccessibility for references.\n       Possible values:\n             'auto' - The system determines whether the view is important for accessibility - default (recommended).\n             'yes' - The view is important for accessibility.\n             'no' - The view is not important for accessibility.\n             'no-hide-descendants' - The view is not important for accessibility, nor are any of its descendant views.\n- `onAccessibilityTap`\n       When `accessible` is true, the system will try to invoke this function when the user performs accessibility tap gesture.\n        __*platform* ios__\n- `onBlur`\n       When `accessible` is true (which is the default) this may be called when\n       the OS-specific concept of \"blur\" occurs, meaning the element lost focus.\n       Some platforms may not have the concept of blur.\n- `onFocus`\n       When `accessible` is true (which is the default) this may be called when\n       the OS-specific concept of \"focus\" occurs. Some platforms may not have\n       the concept of focus.\n- `onLayout`\n       Invoked on mount and layout changes with\n       {nativeEvent: {layout: {x, y, width, height}}}\n- `onMagicTap`\n       When accessible is true, the system will invoke this function when the user performs the magic tap gesture.\n        __*platform* ios__\n- `onPress`\n       Called when the touch is released,\n       but not if cancelled (e.g. by a scroll that steals the responder lock).\n- `pressRetentionOffset`\n       When the scroll view is disabled, this defines how far your\n       touch may move off of the button, before deactivating the button.\n       Once deactivated, try moving it back and you'll see that the button\n       is once again reactivated! Move it back and forth several times\n       while the scroll view is disabled. Ensure you pass in a constant\n       to reduce memory allocations.\n- `style`\n       //FIXME: not in doc but available in examples\n- `testID`\n       Used to locate this view in end-to-end tests.\n- `tvParallaxProperties`\n       *(Apple TV only)* Object with properties to control Apple TV parallax effects.\n       enabled: If true, parallax effects are enabled.  Defaults to true.\n       shiftDistanceX: Defaults to 2.0.\n       shiftDistanceY: Defaults to 2.0.\n       tiltAngle: Defaults to 0.05.\n       magnification: Defaults to 1.0.\n       pressMagnification: Defaults to 1.0.\n       pressDuration: Defaults to 0.3.\n       pressDelay: Defaults to 0.0.\n        __*platform* ios__\n"}],"tag":"SearchResult"}]