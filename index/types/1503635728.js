// This file was generated by purescript-docs-search
window.DocsSearchTypeIndex["1503635728"] = [{"values":[{"sourceSpan":{"start":[3393,1],"name":".spago/react-basic-native/v0.1.3/src/React/Basic/Native/Generated.purs","end":[3434,4]},"score":0,"packageName":"react-basic-native","name":"ImageBackgroundProps_optional","moduleName":"React.Basic.Native.Generated","info":{"values":[{"type":{"tag":"RCons","contents":["accessibilityComponentType",{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"RCons","contents":["accessibilityElementsHidden",{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]},{"tag":"RCons","contents":["accessibilityHint",{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"RCons","contents":["accessibilityIgnoresInvertColors",{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]},{"tag":"RCons","contents":["accessibilityLabel",{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"RCons","contents":["accessibilityLiveRegion",{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"RCons","contents":["accessibilityRole",{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"RCons","contents":["accessibilityStates",{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},{"tag":"RCons","contents":["accessibilityTraits",{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},{"tag":"RCons","contents":["accessible",{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]},{"tag":"RCons","contents":["blurRadius",{"tag":"TypeConstructor","contents":[["Prim"],"Number"]},{"tag":"RCons","contents":["borderBottomLeftRadius",{"tag":"TypeConstructor","contents":[["Prim"],"Number"]},{"tag":"RCons","contents":["borderBottomRightRadius",{"tag":"TypeConstructor","contents":[["Prim"],"Number"]},{"tag":"RCons","contents":["borderRadius",{"tag":"TypeConstructor","contents":[["Prim"],"Number"]},{"tag":"RCons","contents":["borderTopLeftRadius",{"tag":"TypeConstructor","contents":[["Prim"],"Number"]},{"tag":"RCons","contents":["borderTopRightRadius",{"tag":"TypeConstructor","contents":[["Prim"],"Number"]},{"tag":"RCons","contents":["capInsets",{"tag":"TypeConstructor","contents":[["React","Basic","Native","Generated"],"Insets"]},{"tag":"RCons","contents":["defaultSource",{"tag":"TypeConstructor","contents":[["React","Basic","Native","Generated"],"ImageURISource"]},{"tag":"RCons","contents":["fadeDuration",{"tag":"TypeConstructor","contents":[["Prim"],"Number"]},{"tag":"RCons","contents":["height",{"tag":"TypeConstructor","contents":[["Prim"],"Number"]},{"tag":"RCons","contents":["imageStyle",{"tag":"TypeConstructor","contents":[["React","Basic","DOM","Internal"],"CSS"]},{"tag":"RCons","contents":["importantForAccessibility",{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"RCons","contents":["loadingIndicatorSource",{"tag":"TypeConstructor","contents":[["React","Basic","Native","Generated"],"ImageURISource"]},{"tag":"RCons","contents":["onAccessibilityTap",{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},{"tag":"RCons","contents":["onError",{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Effect","Uncurried"],"EffectFn1"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["React","Basic","Native","Events"],"NativeSyntheticEvent"]},{"tag":"TypeConstructor","contents":[["React","Basic","Native","Generated"],"ImageErrorEventData"]}]}}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},{"tag":"RCons","contents":["onLayout",{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Effect","Uncurried"],"EffectFn1"]},{"tag":"TypeConstructor","contents":[["React","Basic","Native","Generated"],"LayoutChangeEvent"]}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},{"tag":"RCons","contents":["onLoad",{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Effect","Uncurried"],"EffectFn1"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["React","Basic","Native","Events"],"NativeSyntheticEvent"]},{"tag":"TypeConstructor","contents":[["React","Basic","Native","Generated"],"ImageLoadEventData"]}]}}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},{"tag":"RCons","contents":["onLoadEnd",{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},{"tag":"RCons","contents":["onLoadStart",{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},{"tag":"RCons","contents":["onMagicTap",{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},{"tag":"RCons","contents":["onPartialLoad",{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},{"tag":"RCons","contents":["onProgress",{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Effect","Uncurried"],"EffectFn1"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["React","Basic","Native","Events"],"NativeSyntheticEvent"]},{"tag":"TypeConstructor","contents":[["React","Basic","Native","Generated"],"ImageProgressEventDataIOS"]}]}}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},{"tag":"RCons","contents":["progressiveRenderingEnabled",{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]},{"tag":"RCons","contents":["resizeMethod",{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"RCons","contents":["resizeMode",{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"RCons","contents":["style",{"tag":"TypeConstructor","contents":[["React","Basic","DOM","Internal"],"CSS"]},{"tag":"RCons","contents":["testID",{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"RCons","contents":["width",{"tag":"TypeConstructor","contents":[["Prim"],"Number"]},{"tag":"RCons","contents":["key",{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"RCons","contents":["children",{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeConstructor","contents":[["React","Basic"],"JSX"]}]},{"tag":"REmpty","contents":{}}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]},"arguments":[]}],"tag":"TypeSynonymResult"},"hashAnchor":"t","comments":"- `accessibilityComponentType`\n       In some cases, we also want to alert the end user of the type of selected component (i.e., that it is a “button”).\n       If we were using native buttons, this would work automatically. Since we are using javascript, we need to\n       provide a bit more context for TalkBack. To do so, you must specify the ‘accessibilityComponentType’ property\n       for any UI component. For instances, we support ‘button’, ‘radiobutton_checked’ and ‘radiobutton_unchecked’ and so on.\n        __*platform* android__\n- `accessibilityElementsHidden`\n       A Boolean value indicating whether the accessibility elements contained within this accessibility element\n       are hidden to the screen reader.\n        __*platform* ios__\n- `accessibilityHint`\n       An accessibility hint helps users understand what will happen when they perform an action on the accessibility element when that result is not obvious from the accessibility label.\n- `accessibilityIgnoresInvertColors`\n       https://facebook.github.io/react-native/docs/accessibility#accessibilityignoresinvertcolorsios\n        __*platform* ios__\n- `accessibilityLabel`\n       Overrides the text that's read by the screen reader when the user interacts with the element. By default, the\n       label is constructed by traversing all the children and accumulating all the Text nodes separated by space.\n- `accessibilityLiveRegion`\n       Indicates to accessibility services whether the user should be notified when this view changes.\n       Works for Android API >= 19 only.\n       See http://developer.android.com/reference/android/view/View.html#attr_android:accessibilityLiveRegion for references.\n        __*platform* android__\n- `accessibilityRole`\n       Accessibility Role tells a person using either VoiceOver on iOS or TalkBack on Android the type of element that is focused on.\n- `accessibilityStates`\n       Accessibility State tells a person using either VoiceOver on iOS or TalkBack on Android the state of the element currently focused on.\n- `accessibilityTraits`\n       Accessibility traits tell a person using VoiceOver what kind of element they have selected.\n       Is this element a label? A button? A header? These questions are answered by accessibilityTraits.\n        __*platform* ios__\n- `accessible`\n       When true, indicates that the view is an accessibility element.\n       By default, all the touchable elements are accessible.\n- `blurRadius`\n       blurRadius: the blur radius of the blur filter added to the image\n        __*platform* ios__\n- `capInsets`\n       When the image is resized, the corners of the size specified by capInsets will stay a fixed size,\n       but the center content and borders of the image will be stretched.\n       This is useful for creating resizable rounded buttons, shadows, and other resizable assets.\n       More info on Apple documentation\n- `defaultSource`\n       A static image to display while downloading the final image off the network.\n- `fadeDuration`\n       Duration of fade in animation.\n- `height`\n       Required if loading images via 'uri' from drawable folder on Android\n       Explanation: https://medium.com/@adamjacobb/react-native-performance-images-adf5843e120\n- `importantForAccessibility`\n       Controls how view is important for accessibility which is if it fires accessibility events\n       and if it is reported to accessibility services that query the screen.\n       Works for Android only. See http://developer.android.com/reference/android/R.attr.html#importantForAccessibility for references.\n       Possible values:\n             'auto' - The system determines whether the view is important for accessibility - default (recommended).\n             'yes' - The view is important for accessibility.\n             'no' - The view is not important for accessibility.\n             'no-hide-descendants' - The view is not important for accessibility, nor are any of its descendant views.\n- `loadingIndicatorSource`\n       similarly to `source`, this property represents the resource used to render\n       the loading indicator for the image, displayed until image is ready to be\n       displayed, typically after when it got downloaded from network.\n- `onAccessibilityTap`\n       When `accessible` is true, the system will try to invoke this function when the user performs accessibility tap gesture.\n        __*platform* ios__\n- `onError`\n       Invoked on load error with {nativeEvent: {error}}\n- `onLayout`\n       onLayout function\n       Invoked on mount and layout changes with\n       {nativeEvent: { layout: {x, y, width, height} }}.\n- `onLoad`\n       Invoked when load completes successfully\n       { source: { url, height, width } }.\n- `onLoadEnd`\n       Invoked when load either succeeds or fails\n- `onLoadStart`\n       Invoked on load start\n- `onMagicTap`\n       When accessible is true, the system will invoke this function when the user performs the magic tap gesture.\n        __*platform* ios__\n- `onPartialLoad`\n       Invoked when a partial load of the image is complete. The definition of\n       what constitutes a \"partial load\" is loader specific though this is meant\n       for progressive JPEG loads.\n        __*platform* ios__\n- `onProgress`\n       Invoked on download progress with {nativeEvent: {loaded, total}}\n- `resizeMethod`\n       The mechanism that should be used to resize the image when the image's dimensions\n       differ from the image view's dimensions. Defaults to `auto`.\n       - `auto`: Use heuristics to pick between `resize` and `scale`.\n       - `resize`: A software operation which changes the encoded image in memory before it\n       gets decoded. This should be used instead of `scale` when the image is much larger\n       than the view.\n       - `scale`: The image gets drawn downscaled or upscaled. Compared to `resize`, `scale` is\n       faster (usually hardware accelerated) and produces higher quality images. This\n       should be used if the image is smaller than the view. It should also be used if the\n       image is slightly bigger than the view.\n       More details about `resize` and `scale` can be found at http://frescolib.org/docs/resizing-rotating.html.\n        __*platform* android__\n- `resizeMode`\n       Determines how to resize the image when the frame doesn't match the raw\n       image dimensions.\n       'cover': Scale the image uniformly (maintain the image's aspect ratio)\n       so that both dimensions (width and height) of the image will be equal\n       to or larger than the corresponding dimension of the view (minus padding).\n       'contain': Scale the image uniformly (maintain the image's aspect ratio)\n       so that both dimensions (width and height) of the image will be equal to\n       or less than the corresponding dimension of the view (minus padding).\n       'stretch': Scale width and height independently, This may change the\n       aspect ratio of the src.\n       'repeat': Repeat the image to cover the frame of the view.\n       The image will keep it's size and aspect ratio. (iOS only)\n       'center': Scale the image down so that it is completely visible,\n       if bigger than the area of the view.\n       The image will not be scaled up.\n- `source`\n       The image source (either a remote URL or a local file resource).\n       This prop can also contain several remote URLs, specified together with their width and height and potentially with scale/other URI arguments.\n       The native side will then choose the best uri to display based on the measured size of the image container.\n       A cache property can be added to control how networked request interacts with the local cache.\n       The currently supported formats are png, jpg, jpeg, bmp, gif, webp (Android only), psd (iOS only).\n- `testID`\n       A unique identifier for this element to be used in UI Automation testing scripts.\n- `width`\n       Required if loading images via 'uri' from drawable folder on Android.\n       Explanation: https://medium.com/@adamjacobb/react-native-performance-images-adf5843e120\n"}],"tag":"SearchResult"}]