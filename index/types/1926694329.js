// This file was generated by purescript-docs-search
window.DocsSearchTypeIndex["1926694329"] = [{"values":[{"sourceSpan":{"start":[11623,1],"name":".spago/react-basic-native/v0.1.3/src/React/Basic/Native/Generated.purs","end":[11656,4]},"packageName":"react-basic-native","name":"TextProps","moduleName":"React.Basic.Native.Generated","info":{"values":[{"type":{"tag":"RCons","contents":["accessibilityComponentType",{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"RCons","contents":["accessibilityElementsHidden",{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]},{"tag":"RCons","contents":["accessibilityHint",{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"RCons","contents":["accessibilityIgnoresInvertColors",{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]},{"tag":"RCons","contents":["accessibilityLabel",{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"RCons","contents":["accessibilityLiveRegion",{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"RCons","contents":["accessibilityRole",{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"RCons","contents":["accessibilityStates",{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},{"tag":"RCons","contents":["accessibilityTraits",{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},{"tag":"RCons","contents":["accessible",{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]},{"tag":"RCons","contents":["adjustsFontSizeToFit",{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]},{"tag":"RCons","contents":["allowFontScaling",{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]},{"tag":"RCons","contents":["ellipsizeMode",{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"RCons","contents":["importantForAccessibility",{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"RCons","contents":["lineBreakMode",{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"RCons","contents":["maxFontSizeMultiplier",{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"RCons","contents":["minimumFontScale",{"tag":"TypeConstructor","contents":[["Prim"],"Number"]},{"tag":"RCons","contents":["nativeID",{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"RCons","contents":["numberOfLines",{"tag":"TypeConstructor","contents":[["Prim"],"Number"]},{"tag":"RCons","contents":["onAccessibilityTap",{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},{"tag":"RCons","contents":["onLayout",{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Effect","Uncurried"],"EffectFn1"]},{"tag":"TypeConstructor","contents":[["React","Basic","Native","Generated"],"LayoutChangeEvent"]}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},{"tag":"RCons","contents":["onLongPress",{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Effect","Uncurried"],"EffectFn1"]},{"tag":"TypeConstructor","contents":[["React","Basic","Native","Generated"],"GestureResponderEvent"]}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},{"tag":"RCons","contents":["onMagicTap",{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Effect"],"Effect"]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},{"tag":"RCons","contents":["onPress",{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Effect","Uncurried"],"EffectFn1"]},{"tag":"TypeConstructor","contents":[["React","Basic","Native","Generated"],"GestureResponderEvent"]}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},{"tag":"RCons","contents":["selectable",{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]},{"tag":"RCons","contents":["selectionColor",{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"RCons","contents":["style",{"tag":"TypeConstructor","contents":[["React","Basic","DOM","Internal"],"CSS"]},{"tag":"RCons","contents":["suppressHighlighting",{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]},{"tag":"RCons","contents":["testID",{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"RCons","contents":["textBreakStrategy",{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"RCons","contents":["key",{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"RCons","contents":["children",{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeConstructor","contents":[["React","Basic"],"JSX"]}]},{"tag":"REmpty","contents":{}}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]},"arguments":[]}],"tag":"TypeSynonymResult"},"hashAnchor":"t","comments":"- `accessibilityComponentType`\n       In some cases, we also want to alert the end user of the type of selected component (i.e., that it is a “button”).\n       If we were using native buttons, this would work automatically. Since we are using javascript, we need to\n       provide a bit more context for TalkBack. To do so, you must specify the ‘accessibilityComponentType’ property\n       for any UI component. For instances, we support ‘button’, ‘radiobutton_checked’ and ‘radiobutton_unchecked’ and so on.\n        __*platform* android__\n- `accessibilityElementsHidden`\n       A Boolean value indicating whether the accessibility elements contained within this accessibility element\n       are hidden to the screen reader.\n        __*platform* ios__\n- `accessibilityHint`\n       An accessibility hint helps users understand what will happen when they perform an action on the accessibility element when that result is not obvious from the accessibility label.\n- `accessibilityIgnoresInvertColors`\n       https://facebook.github.io/react-native/docs/accessibility#accessibilityignoresinvertcolorsios\n        __*platform* ios__\n- `accessibilityLabel`\n       Overrides the text that's read by the screen reader when the user interacts with the element. By default, the\n       label is constructed by traversing all the children and accumulating all the Text nodes separated by space.\n- `accessibilityLiveRegion`\n       Indicates to accessibility services whether the user should be notified when this view changes.\n       Works for Android API >= 19 only.\n       See http://developer.android.com/reference/android/view/View.html#attr_android:accessibilityLiveRegion for references.\n        __*platform* android__\n- `accessibilityRole`\n       Accessibility Role tells a person using either VoiceOver on iOS or TalkBack on Android the type of element that is focused on.\n- `accessibilityStates`\n       Accessibility State tells a person using either VoiceOver on iOS or TalkBack on Android the state of the element currently focused on.\n- `accessibilityTraits`\n       Accessibility traits tell a person using VoiceOver what kind of element they have selected.\n       Is this element a label? A button? A header? These questions are answered by accessibilityTraits.\n        __*platform* ios__\n- `accessible`\n       When true, indicates that the view is an accessibility element.\n       By default, all the touchable elements are accessible.\n- `adjustsFontSizeToFit`\n       Specifies whether font should be scaled down automatically to fit given style constraints.\n- `allowFontScaling`\n       Specifies whether fonts should scale to respect Text Size accessibility settings.\n       The default is `true`.\n- `ellipsizeMode`\n       This can be one of the following values:\n       - `head` - The line is displayed so that the end fits in the container and the missing text\n       at the beginning of the line is indicated by an ellipsis glyph. e.g., \"...wxyz\"\n       - `middle` - The line is displayed so that the beginning and end fit in the container and the\n       missing text in the middle is indicated by an ellipsis glyph. \"ab...yz\"\n       - `tail` - The line is displayed so that the beginning fits in the container and the\n       missing text at the end of the line is indicated by an ellipsis glyph. e.g., \"abcd...\"\n       - `clip` - Lines are not drawn past the edge of the text container.\n       The default is `tail`.\n       `numberOfLines` must be set in conjunction with this prop.\n       > `clip` is working only for iOS\n- `importantForAccessibility`\n       Controls how view is important for accessibility which is if it fires accessibility events\n       and if it is reported to accessibility services that query the screen.\n       Works for Android only. See http://developer.android.com/reference/android/R.attr.html#importantForAccessibility for references.\n       Possible values:\n             'auto' - The system determines whether the view is important for accessibility - default (recommended).\n             'yes' - The view is important for accessibility.\n             'no' - The view is not important for accessibility.\n             'no-hide-descendants' - The view is not important for accessibility, nor are any of its descendant views.\n- `lineBreakMode`\n       Line Break mode. Works only with numberOfLines.\n       clip is working only for iOS\n- `maxFontSizeMultiplier`\n       Specifies largest possible scale a font can reach when allowFontScaling is enabled. Possible values:\n       - null/undefined (default): inherit from the parent node or the global default (0)\n       - 0: no max, ignore parent/global default\n       - >= 1: sets the maxFontSizeMultiplier of this node to this value\n- `minimumFontScale`\n       Specifies smallest possible scale a font can reach when adjustsFontSizeToFit is enabled. (values 0.01-1.0).\n- `nativeID`\n       Used to reference react managed views from native code.\n- `numberOfLines`\n       Used to truncate the text with an ellipsis after computing the text\n       layout, including line wrapping, such that the total number of lines\n       does not exceed this number.\n       This prop is commonly used with `ellipsizeMode`.\n- `onAccessibilityTap`\n       When `accessible` is true, the system will try to invoke this function when the user performs accessibility tap gesture.\n        __*platform* ios__\n- `onLayout`\n       Invoked on mount and layout changes with\n       {nativeEvent: { layout: {x, y, width, height}}}.\n- `onLongPress`\n       This function is called on long press.\n       e.g., `onLongPress={this.increaseSize}>``\n            *\n- `onMagicTap`\n       When accessible is true, the system will invoke this function when the user performs the magic tap gesture.\n        __*platform* ios__\n- `onPress`\n       This function is called on press.\n       Text intrinsically supports press handling with a default highlight state (which can be disabled with suppressHighlighting).\n- `selectable`\n       Lets the user select text, to use the native copy and paste functionality.\n- `selectionColor`\n       The highlight color of the text.\n- `style`\n       see <https://facebook.github.io/react-native/docs/text.html#style>\n- `suppressHighlighting`\n       When `true`, no visual change is made when text is pressed down. By\n       default, a gray oval highlights the text on press down.\n- `testID`\n       Used to locate this view in end-to-end tests.\n- `textBreakStrategy`\n       Set text break strategy on Android API Level 23+\n       default is `highQuality`.\n"}],"tag":"SearchResult"}]