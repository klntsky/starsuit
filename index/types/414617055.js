// This file was generated by purescript-docs-search
window.DocsSearchTypeIndex["414617055"] = [{"values":[{"sourceSpan":{"start":[83,1],"name":".spago/halogen/v5.0.0-rc.6/src/Halogen/Component.purs","end":[87,4]},"packageName":"halogen","name":"ComponentSpec","moduleName":"Halogen.Component","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"tag":"RCons","contents":["initialState",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"input"}]},{"tag":"TypeVar","contents":"state"}]},{"tag":"RCons","contents":["render",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"state"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"surface"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Halogen","Component"],"ComponentSlot"]},{"tag":"TypeVar","contents":"surface"}]},{"tag":"TypeVar","contents":"slots"}]},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeVar","contents":"action"}]}}]},{"tag":"TypeVar","contents":"action"}]}]},{"tag":"RCons","contents":["eval",{"tag":"BinaryNoParensType","contents":[{"tag":"TypeOp","contents":[["Data","NaturalTransformation"],"~>"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Halogen","Query","HalogenQ"],"HalogenQ"]},{"tag":"TypeVar","contents":"query"}]},{"tag":"TypeVar","contents":"action"}]},{"tag":"TypeVar","contents":"input"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Halogen","Query","HalogenM"],"HalogenM"]},{"tag":"TypeVar","contents":"state"}]},{"tag":"TypeVar","contents":"action"}]},{"tag":"TypeVar","contents":"slots"}]},{"tag":"TypeVar","contents":"output"}]},{"tag":"TypeVar","contents":"m"}]}]},{"tag":"REmpty","contents":{}}]}]}]}]},"arguments":[["surface",null],["state",null],["query",null],["action",null],["slots",null],["input",null],["output",null],["m",null]]}],"tag":"TypeSynonymResult"},"hashAnchor":"t","comments":"The spec for a component.\n\nThe type variables involved:\n- `surface` is the type that will be rendered by the component, usually\n  `HTML`\n- `state` is the component's state\n- `query` is the query algebra; the requests that can be made of the\n  component\n- `action` is the type of actions; messages internal to the component that\n  can be evaluated\n- `slots` is the set of slots for addressing child components\n- `input` is the input value that will be received when the parent of\n  this component renders\n- `output` is the type of messages the component can raise\n- `m` is the effect monad used during evaluation\n\nThe values in the record:\n- `initialState` is a function that accepts an input value and produces the\n  state the component will start with. If the input value is unused\n  (`Unit`), or irrelevant to the state construction, this will often be\n  `const ?someInitialStateValue`.\n- `render` is a function that accepts the component's current state and\n  produces a value to render (`HTML` usually). The rendered output can\n  raise actions that will be handled in `eval`.\n- `eval` is a function that handles the `HalogenQ` algebra that deals with\n  component lifecycle, handling actions, and responding to requests.\n"}],"tag":"SearchResult"}]